{"/home/travis/build/npmtest/node-npmtest-resume-cli/test.js":"/* istanbul instrument in package npmtest_resume_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resume-cli/lib.npmtest_resume_cli.js":"/* istanbul instrument in package npmtest_resume_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_resume_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_resume_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-resume-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-resume-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_resume_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_resume_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_resume_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_resume_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_resume_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_resume_cli.__dirname + '/lib.npmtest_resume_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/index.js":"#!/usr/bin/env node\n\nrequire('dotenv').load({silent: true});\nvar pkg = require(__dirname + '/package.json');\nvar lib = require(__dirname + '/lib');\nvar program = require('commander');\nvar colors = require('colors');\nvar chalk = require('chalk');\nvar read = require('read');\nvar path = require('path');\n\nlib.preFlow(function(err, results) {\n\n  var resumeJson = results.getResume;\n  var config = results.getConfig;\n\n  program\n    .usage(\"[command] [options]\")\n    .version(pkg.version)\n    .option('-t, --theme <theme name>', 'Specify theme for export or publish (modern, crisp, flat: default)', 'flat')\n    .option('-F, --force', 'Used by `publish` - bypasses schema testing.')\n    .option('-f, --format <file type extension>', 'Used by `export`.')\n    .option('-r, --resume <resume filename>', 'Used by `serve` (default: resume.json)', path.join(process.cwd(), 'resume.json'))\n    .option('-p, --port <port>', 'Used by `serve` (default: 4000)', 4000)\n    .option('-s, --silent', 'Used by `serve` to tell it if open browser auto or not.', false)\n    .option('-d, --dir <path>', 'Used by `serve` to indicate a public directory path.', 'public');\n\n  program\n    .command('init')\n    .description('Initialize a resume.json file')\n    .action(function() {\n      lib.init()\n    });\n\n  program\n    .command('register')\n    .description('Register an account at https://registry.jsonresume.org')\n    .action(function() {\n      lib.register(resumeJson);\n    });\n\n  program\n    .command('login')\n    .description('Stores a user session.')\n    .action(function() {\n      lib.login(resumeJson);\n    });\n\n  program\n    .command('settings')\n    .description('Change theme, change password, delete account.')\n    .action(function() {\n      lib.settings(resumeJson, program, config);\n    });\n\n  program\n    .command('test')\n    .description('Schema validation test your resume.json')\n    .action(function() {\n      lib.test.validate(resumeJson, function(error, response) {\n        error && console.log(response.message);\n      });\n    });\n\n  program\n    .command('export [fileName]')\n    .description('Export locally to .html or .pdf. Supply a --format <file format> flag and argument to specify export format.')\n    .action(function(fileName) {\n      lib.exportResume(resumeJson, fileName, program, function(err, fileName, format) {\n        console.log(chalk.green('\\nDone! Find your new', format, 'resume at:\\n', path.resolve(process.cwd(), fileName + format)));\n      });\n    });\n\n  program\n    .command('publish')\n    .description('Publish your resume to https://registry.jsonresume.org')\n    .action(function() {\n      lib.publish(resumeJson, program, config);\n    });\n\n  program\n    .command('serve')\n    .description('Serve resume at http://localhost:4000/')\n    .action(function() {\n      lib.serve(program.port, program.theme, program.silent, program.dir, program.resume);\n    });\n\n  program.parse(process.argv);\n\n  var validCommands = program.commands.map(function(cmd) {\n    return cmd._name;\n  });\n\n  if (!program.args.length) {\n    console.log('resume-cli:'.cyan, 'http://jsonresume.org', '\\n');\n    program.help();\n\n  } else if (validCommands.indexOf(process.argv[2]) === -1) {\n    console.log('Invalid argument:'.red, process.argv[2]);\n    console.log('resume-cli:'.cyan, 'http://jsonresume.org', '\\n');\n    program.help();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/index.js":"module.exports = {\n    init: require('./init'),\n    test: require('./test'),\n    publish: require('./publish'),\n    register: require('./register'),\n    exportResume: require('./export-resume'),\n    settings: require('./settings'),\n    serve: require('./serve'),\n    version: require('./version'),\n    login: require('./login'),\n    preFlow: require('./pre-flow')\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/init.js":"var fs = require('fs');\nvar read = require('read');\nvar resumeJson = require('resume-schema').resumeJson;\nvar chalk = require('chalk'); // slowly replace colors with chalk\n\nfunction fillInit() {\n    console.log('\\nThis utility will generate a resume.json file in your current working directory.');\n    console.log('Fill out your name and email to get started, or leave the fields blank.');\n    console.log('All fields are optional.\\n');\n    console.log('Press ^C at any time to quit.');\n\n    read({\n        prompt: 'name: '\n    }, function(er, name) {\n        if (er) {\n            console.log();\n            process.exit();\n        }\n\n        read({\n            prompt: 'email: '\n        }, function(er, email) {\n            if (er) {\n                console.log();\n                process.exit();\n            }\n\n            resumeJson.basics.name = name;\n            resumeJson.basics.email = email;\n\n            fs.writeFileSync(process.cwd() + '/resume.json', JSON.stringify(resumeJson, undefined, 2));\n\n            console.log('\\nYour resume.json has been created!'.green);\n            console.log('');\n            console.log('To generate a formatted .html .md .txt or .pdf resume from your resume.json');\n            console.log('type: `resume export [someFileName]` including file extension eg: `resume export myresume.html`');\n            console.log('\\nYou can optionally specify an available theme for html and pdf resumes using the --theme flag.');\n            console.log('Example: `resume export myresume.pdf --theme flat`');\n            console.log('Or simply type: `resume export` and follow the prompts.');\n            console.log('');\n\n            process.exit();\n            callback(true);\n        });\n    });\n}\n\nfunction init() {\n    if (fs.existsSync('./resume.json')) {\n        console.log(chalk.yellow('There is already a resume.json file in this directory.'));\n        read({\n            prompt: 'Do you want to override? [y/n]:'\n        }, function(er, answer) {\n            if (er) {\n                console.log();\n                process.exit();\n            }\n            if (answer === 'y') {\n                fillInit();\n            } else {\n                process.exit();\n            }\n        });\n\n    } else {\n        fillInit();\n    }\n}\n\nmodule.exports = init;\n\n//todo: fix success wording\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/test.js":"var fs = require('fs');\nvar resumeSchema = require('resume-schema');\nvar colors = require('colors');\nvar chalk = require('chalk'); // slowly replace colors with chalk\n\nvar symbols = {\n    ok: '\\u2713',\n    err: '\\u2717'\n};\n\n// win32 console default output fonts don't support tick/cross\nif (process && process.platform === 'win32') {\n    symbols = {\n        ok: '\\u221A',\n        err: '\\u00D7'\n    };\n}\n\nvar tick = chalk.green(symbols.ok);\nvar cross = chalk.red(symbols.err);\n\n//converts the schema's returned path output, to JS object selection notation.\nfunction pathFormatter(path) {\n    var jsonPath = path.split('/');\n    jsonPath.shift();\n    jsonPath = jsonPath.join('.');\n    jsonPath = jsonPath.replace('.[', '[');\n    return jsonPath;\n}\n\nfunction errorFormatter(errors) {\n    //if json parse errors\n    // if (readFileErrors) {\n    //     console.log('    ', cross + '  ' + chalk.gray(readFileErrors));\n    //     console.log(chalk.red('\\n  fail  ' + errors.errors.length), '\\n');\n    //     console.log('Visit'.cyan, 'http://jsonlint.com/', 'for details on correct .json fromatting.'.cyan);\n    //     return;\n    // }\n\n    errors.errors.forEach(function(error) {\n        console.log('    ', cross, chalk.gray(pathFormatter(error.path), 'is', error.params.type, ', expected',\n            error.params.expected ? error.params.expected : error.params.format));\n    });\n\n    console.log(chalk.red('\\n  fail  ' + errors.errors.length), '\\n');\n    console.log('Please fix your resume.json file and try again'); //wording? link to docs\n}\n\nfunction validate(resumeData, callback) {\n    console.log('\\n  running validation tests on resume.json ... \\n');\n    resumeSchema.validate(resumeData, function(report, errs) {\n        if (errs) {\n            // or json parse errors\n            var temp = 'Cannot export. There are errors in your resume.json schema format.\\n';\n            if (resumeData === undefined) {\n                temp += 'Try using The JSONLint Validator at: http://jsonlint.com/\\n';\n                errs.errors[0].params.type = 'unparsable';\n                errs.errors[0].params.expected = 'json';\n            }\n            callback(true, {\n                message: temp\n            });\n            errorFormatter(errs);\n\n        } else {\n            console.log('  ' + tick + ' Passed all validation tests. \\n'.green);\n            // console.log(report)\n            console.log('To publish your resume at'.cyan, 'http://jsonresume.org', 'type the command'.cyan, 'resume publish');\n\n            callback(false);\n        }\n    });\n}\n\nmodule.exports = {\n    validate: validate,\n    errorFormatter: errorFormatter\n};\n\n//TODO error handling for single quotes\n\n// use json error handler to pinpoint errors\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/publish/index.js":"var resumeSchema = require('resume-schema');\nvar colors = require('colors');\nvar chalk = require('chalk');\nvar read = require('read');\nvar async = require('async');\nvar test = require('../test');\nvar menu = require('./menu');\nvar publishResume = require('./publish-resume');\n\n\n//publish menu\nvar customPublish = 'Publish to your account.';\nvar guestPublish = 'Publish as guest.';\nvar encriptedCustom = 'Publish to your account (password access).';\nvar encriptedGuest = 'Publish as guest (password access).';\n\nfunction logPublishErrors(errs) {\n    console.log(chalk.red('Error: Resume failed to publish.'));\n    console.log('Reasons:');\n    console.log(errs);\n    // console.log(test.errorFormatter(errs));\n    console.log(chalk.cyan('For error troubleshooting type:'), 'resume test');\n    console.log(chalk.cyan('Or to try to publish regardless of the error warnings, type:'), 'resume publish --force');\n    process.exit();\n};\n\nmodule.exports = function publish(resumeJson, program, config) {\n\n    var defaultEmail = resumeJson && resumeJson.basics.email || '';\n\n\n    // if (force) {\n    //         console.log('You resume.json did not pass formatting tests. Attempting to publish anyway...'.yellow);\n    //     }\n\n    // if (error && !program.force) {\n    //     console.log(response.message);\n\n    // force = program.force;\n\n    menu.publish(function(option) {\n\n        switch (option) {\n\n            case guestPublish:\n\n                publishResume(resumeJson, program.theme, null, null, true, false, null);\n                break;\n\n            case customPublish:\n\n                if (typeof config.session !== 'undefined') {\n                    publishResume(resumeJson, program.theme, config.email, null, false, false, config.session);\n                    return;\n\n                } else {\n                    console.log('\\nTo acquire login details use the command: `resume register`');\n                    console.log('If you already have an account, enter your login details below:');\n                    read({\n                        prompt: \"email: \",\n                        default: defaultEmail\n                    }, function(er, email) {\n                        if (er) {\n                            console.log();\n                            process.exit();\n                        }\n                        read({\n                            prompt: \"password: \",\n                            silent: true\n                        }, function(er, password) {\n                            if (er) {\n                                console.log();\n                                process.exit();\n                            }\n                            publishResume(resumeJson, program.theme, email, password, false, false, null);\n                        });\n                    });\n                }\n                break;\n\n            case encriptedCustom:\n\n                console.log('\\nTo acquire login details use the command: `resume register`');\n                console.log('If you already have an account, enter your login details below:');\n\n                async.series({\n                    email: function(next) {\n                        read({\n                            prompt: \"Email: \",\n                            default: defaultEmail\n                        }, function(err, email) {\n\n                            next(err, email)\n                        });\n                    },\n                    password: function(next) {\n                        read({\n                            prompt: \"Password: \",\n                            silent: true\n                        }, function(err, password) {\n\n                            next(err, password);\n                        });\n                    },\n                    resumePassword: function(next) {\n                        console.log('Now enter the password you will give out for private access to your published resume.');\n                        read({\n                            prompt: \"Resume Password: \"\n                        }, function(err, resumePassword) {\n\n                            next(err, resumePassword);\n                        });\n                    }\n                }, function(err, results) {\n                    if (err) {\n                        console.log();\n                        process.exit();\n                    }\n\n                    publishResume(resumeJson, program.theme, results.email, results.password, false, results.resumePassword, config.session);\n                });\n                break;\n\n            case encriptedGuest:\n\n                console.log('\\nEnter a password for your hosted resume.');\n                console.log('This is the password you will give out for access to your published resume.');\n                read({\n                    prompt: \"resume password: \"\n                }, function(er, passphrase) {\n                    if (er) {\n                        console.log();\n                        process.exit();\n                    }\n                    publishResume(resumeJson, program.theme, null, null, true, passphrase, null);\n                });\n                break;\n\n        }\n    });\n};\n\n// function sessionPublish(resumeJson, program, session) {\n//     force = program.force;\n//     publishMenu(function(option) {\n//         switch (option) {\n//             case guestPublish:\n//                 publishResume(resumeJson, program.theme, null, null, true, false);\n//                 break;\n//             case customPublish:\n//                 publishResume(resumeJson, program.theme, email, password, false, false);\n//                 break;\n//             case encriptedCustom:\n//                 publishResume(resumeJson, program.theme, email, password, false, passphrase);\n//                 break;\n//             case encriptedGuest:\n//                 publishResume(resumeJson, program.theme, null, null, true, passphrase);\n//                 break;\n//         }\n//     });\n// }\n//network connection error handling\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/publish/menu.js":"//publish menu\nvar customPublish = 'Publish to your account.';\nvar guestPublish = 'Publish as guest.';\nvar encriptedCustom = 'Publish to your account (password access).';\nvar encriptedGuest = 'Publish as guest (password access).';\n\nexports.publish = function(callback) {\n  var menu = require('terminal-menu')({\n    width: 35,\n    x: 4,\n    y: 2,\n    bg: 'black',\n    fg: 'cyan'\n  });\n  menu.reset();\n  menu.write('        PUBLISH MENU\\n');\n  menu.write('------------------------------\\n');\n  menu.add(customPublish);\n  menu.add(guestPublish);\n  menu.add(encriptedCustom);\n  menu.add(encriptedGuest);\n  menu.write('------------------------------\\n');\n  menu.add('EXIT');\n  menu.write('\\n');\n  menu.write('To acquire account details, press ^C and type: `resume register`\\n'.white);\n  menu.write('Or just publish as guest.'.white);\n  menu.on('select', function(option) {\n    menu.close();\n    console.log('\\nSELECTED: ' + option);\n    if (option === 'EXIT') {\n      return;\n    } else {\n      callback(option);\n    }\n  });\n\n  process.stdin\n    .pipe(menu.createStream())\n    .pipe(process.stdout); //create key stream\n  process.stdin.setRawMode(true); //listen for keys\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/publish/publish-resume.js":"var registryServer = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar request = require('superagent');\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('publishing...');\nspinner.setSpinnerString('/-\\\\');\nvar read = require('read');\nvar open = require('open');\nvar chalk = require('chalk');\n\nmodule.exports = function publishResume(resumeJson, theme, email, password, guest, passphrase, session, callback) {\n\n    var callback = callback || function() {}; // for testing\n    // console.log({\n    //     resume: resumeJson,\n    //     theme: theme,\n    //     email: email,\n    //     password: password,\n    //     guest: guest,\n    //     passphrase: passphrase,\n    //     session: session\n    // });\n    spinner.start();\n    request\n        .post(registryServer + '/resume')\n        .send({\n            resume: resumeJson,\n            theme: theme,\n            email: email,\n            password: password,\n            guest: guest,\n            passphrase: passphrase,\n            session: session\n        })\n        .set('Accept', 'application/json')\n        .end(function(err, res) {\n            spinner.stop();\n            callback(err, res);\n            // cannot read property of null\n            if (res.body.sessionError) {\n                console.log('\\n', chalk.red(res.body.sessionError));\n                console.log('Your session details are out of date or invalid. Please type `resume login` to renew your session.');\n                return;\n\n            } else if (err && err.code === 'ENOTFOUND') {\n                console.log(chalk.red('\\nThere has been an error publishing your resume.'));\n                console.log(chalk.cyan('Please check your network connection.'));\n                process.exit();\n                return;\n            } else if (err || res.body.message === 'ERRORRRSSSS') {\n\n                console.log(err, registryServer);\n                console.log(chalk.red('\\nThere has been an error publishing your resume.'));\n                // console.log('Details:', error, res.body.message);\n                console.log(chalk.blue('Please check you are using correct login details.'));\n            } else {\n\n                // console.log(res.body);\n                console.log(chalk.green('\\nSuccess! Your resume is now published at:'), res.body.url);\n\n\n                if (process && process.platform !== 'win32') {\n\n                    read({\n                        prompt: 'Would you like to open your newly published resume in the web browser? [y/n]: '\n                    }, function(er, answer) {\n                        if (answer === 'y') {\n                            open(res.body.url);\n                            process.exit();\n                        } else if (answer === 'n') {\n                            process.exit();\n                        }\n                    });\n                }\n            }\n        });\n    return;\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/register/index.js":"var validate = require('./validate');\nvar registerUser = require('./register-user');\nvar writeConfig = require('./write-config');\nvar read = require('read');\nvar async = require('async');\nvar chalk = require('chalk');\n\nmodule.exports = function register(resumeJson) {\n\n  console.log('What username would like to reserve?');\n  console.log(chalk.cyan('Your resume will be available at: '), 'registry.jsonresume.org/{username}:');\n\n    async.series({\n        username: function(next) {\n            read({\n                prompt: \"username: \"\n            }, function(err, username) {\n\n                validate.username(username);\n                next(err, username);\n            });\n        },\n        email: function(next) {\n\n            var defaultEmail = resumeJson && resumeJson.basics.email || '';\n\n            read({\n                prompt: \"email: \",\n                default: defaultEmail\n            }, function(err, email) {\n\n                validate.email(email);\n                next(err, email);\n            });\n        },\n        password: function(next) {\n            read({\n                prompt: \"password: \",\n                silent: true\n            }, function(err, password) {\n\n                next(err, password);\n            });\n        }\n    }, function(err, user) {\n        if (err) {\n            // this error is usually fired when pressing Ctrl+C\n            console.log();\n            process.exit();\n        }\n\n        read({\n            prompt: \"re-enter password: \",\n            silent: true\n        }, function(err, password) {\n\n            validate.passwords(user.password, password);\n\n            registerUser(user, function(err, res) {\n\n                writeConfig({\n                    username: res.username,\n                    email: res.email\n                });\n            });\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/register/validate.js":"module.exports = {\n    username: function(username) {\n        var re = /^[^_-][a-zA-Z0-9\\-_]{2,30}$/;\n        if (re.test(username)) {\n            return;\n        }\n        console.log('Username may only contain alphanumeric characters, underscores or dashes, must be at least 3 characters, and cannot begin with a dash or underscore.'.red);\n        // must be over 2 characters\n        process.exit();\n    },\n    email: function(email) {\n        var re = /\\S+@\\S+\\.\\S+/;\n        if (re.test(email)) {\n            return;\n        }\n        console.log('Email format is invalid.'.red);\n        process.exit();\n    },\n    passwords: function(password1, password2) {\n        if (password1 === password2) {\n            return;\n        }\n        console.log('Your passwords did not match, try again.'.red);\n        process.exit();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/register/register-user.js":"var read = require('read');\nvar request = require('superagent');\nvar registryServer = process.env.REGISTRY_SERVER  || 'http://registry.jsonresume.org';\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('registering...');\nspinner.setSpinnerString('/-\\\\');\n\nmodule.exports = function registerUser(user, callback) {\nconsole.log('registering user');\n    spinner.start();\n    request\n        .post(registryServer + '/user')\n        .send(user)\n        .set('X-API-Key', 'foobar')\n        .set('Accept', 'application/json')\n        .end(function(error, response) {\n            spinner.stop();\n            // console.log(error, response.body.error);\n            // console.log(response.body); //if success.\n            if (error) {\n                // console.log(error);\n                console.log('There has been an error publishing your resume'.red);\n                callback(error, response);\n            } else if (response.body.message === 'success') {\n\n                console.log('Success! You have registered:'.green, 'http://registry.jsonresume.org/' + user.username);\n                console.log('You can now type: `resume publish` to publish your resume to this domain.');\n\n                callback(null, {\n                    username: response.body.username,\n                    email: response.body.email\n                });\n\n            } else if (response.body.error && response.body.error.field === 'email') {\n                // console.log(response.body.error.message.red) // change the response message\n                console.log('Email already in use, please use a different one.'.red);\n                read({\n                    prompt: \"enter a different email: \"\n                }, function(er, email) {\n                    if (er) {\n                        console.log();\n                        process.exit();\n                    }\n\n                    user.email = email;\n                    registerUser(user);\n                });\n            } else if (response.body.error && response.body.error.field === 'username') {\n                read({\n                    prompt: \"enter a different username: \"\n                }, function(er, username) {\n                    if (er) {\n                        console.log();\n                        process.exit();\n                    }\n                    user.username = username;\n                    registerUser(user);\n                });\n            }\n            // console.log();\n        });\n    return;\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/register/write-config.js":"var fs = require('fs');\nvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nmodule.exports = function writeConfig(authObj, callback) {\n\n    var callback = callback || function(){};\n\n    fs.readFile(homeDir + '/.jsonresume.json', 'utf8', function(fileDoesNotExist, config) {\n        // console.log(authObj);\n        config = JSON.parse(config);\n        config = {\n            username: authObj.username,\n            email: authObj.email,\n            session: config && config.session,\n            checkVersion: config && config.checkVersion,\n            checkSession: config && config.checkSession\n        };\n        // console.log(config);\n        fs.writeFileSync(homeDir + '/.jsonresume.json', JSON.stringify(config, undefined, 2));\n        //todo: use async\n\n        console.log('Your user session has been saved in the jsonresume.json config file in your home directory.');\n        callback(config);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/export-resume/index.js":"var themeServer = process.env.THEME_SERVER || 'http://themes.jsonresume.org/theme/';\nvar registryServer = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar request = require('superagent');\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar read = require('read');\nvar spinner = require(\"char-spinner\");\nvar chalk = require('chalk');\nvar pdf = require('html-pdf');\n\nvar SUPPORTED_FILE_FORMATS = [\"html\", \"pdf\"];\n\nmodule.exports = function exportResume(resumeJson, fileName, program, callback) {\n  var theme = program.theme;\n  if(!theme.match('jsonresume-theme-.*')){\n    theme = 'jsonresume-theme-' + theme;\n  }\n\n  if (!fileName) {\n    console.error(\"Please enter a export destination.\");\n    process.exit(1);\n  }\n\n    var fileNameAndFormat = getFileNameAndFormat(fileName, program.format);\n    fileName = fileNameAndFormat.fileName;\n    var fileFormatToUse = fileNameAndFormat.fileFormatToUse;\n    var format = \".\" + fileFormatToUse;\n    if (format === '.html') {\n      createHtml(resumeJson, fileName, theme, format, function() {\n        callback(null, fileName, format);\n      });\n    }\n    else if (format === '.pdf') {\n      createPdf(resumeJson, fileName, theme, format, function() {\n          callback(null, fileName, format);\n      });\n    }\n\n    else {\n      console.error(`JSON Resume does not support the ${format} format`);\n      process.exit(1);\n    }\n}\n\nfunction extractFileFormat(fileName) {\n  var dotPos = fileName.lastIndexOf('.');\n  if (dotPos === -1) {\n    return null;\n  }\n  return fileName.substring(dotPos + 1).toLowerCase();\n}\n\nfunction createHtml(resumeJson, fileName, theme, format, callback) {\n  var html = renderHtml(resumeJson, theme);\n  var stream = fs.createWriteStream(path.resolve(process.cwd(), fileName + format));\n\n  stream.write(html, function() {\n    stream.close(callback);\n  });\n\n}\n\nfunction renderHtml(resumeJson, theme){\n  var contents = '';\n  try {\n    var themePkg = require(theme);\n  } catch (err) {\n    // Theme not installed\n    console.log('You have to install this theme globally to use it e.g. `npm install -g ' + theme + '`')\n    process.exit();\n  }\n  contents = themePkg.render(resumeJson);\n  return contents;\n}\n\nfunction createPdf(resumeJson, fileName, theme, format, callback) {\n    var html = renderHtml(resumeJson, theme);\n    pdf.create(html, {format: 'Letter'}).toFile(fileName + format, callback);\n}\n\nfunction getFileNameAndFormat(fileName, format) {\n  var fileFormatFound = extractFileFormat(fileName);\n  var fileFormatToUse = format;\n  if (format && fileFormatFound && format === fileFormatFound) {\n    fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n  } else if (fileFormatFound) {\n    fileFormatToUse = fileFormatFound;\n    fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n  }\n\n  return {\n    fileName: fileName,\n    fileFormatToUse: fileFormatToUse\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/index.js":"var read = require('read');\nvar async = require('async');\nvar menu = require('./menu');\nvar changeTheme = require('./change-theme');\nvar changePassword = require('./change-password');\nvar deleteUser = require('./delete-user');\n\nmodule.exports = function settings(resumeJson, program, config) {\n\n  var defaultEmail = resumeJson && resumeJson.basics.email || '';\n\n  menu.main(function(setting) {\n\n    switch (setting) {\n      case 'CHANGE THEME':\n\n        menu.theme(function(theme) {\n\n          async.series({\n            theme: function(next) {\n              // if ADD THEME was not selected, skip this step\n              if (theme !== 'ADD THEME') {\n                return next(null, theme);\n              }\n\n              read({\n                prompt: \"Enter theme name: \"\n              }, function(err, theme) {\n\n                // TODO write theme to config\n                next(err, theme);\n              });\n            },\n            session: function(next) {\n              var session = config && config.session;\n\n              if (!session) {\n                // if no user session, take next step and login using email and password\n                return next(null, null)\n              }\n              // if there was a stored session, break out of the series and use session data to log in.\n              next('break', session);\n            },\n            email: function(next) {\n              read({\n                prompt: \"Email: \",\n                default: defaultEmail\n              }, function(err, email) {\n                next(err, email);\n\n              });\n            },\n            password: function(next) {\n              read({\n                prompt: \"Password: \",\n                silent: true\n              }, function(err, password) {\n\n                next(err, password);\n              });\n            }\n          }, function(err, results) {\n            // set the changeTheme flag for the registry server\n            var hasSession = results.session;\n            if (hasSession) {\n              // fetch the corresponding email to the session token\n              results.email = config.email;\n            }\n\n            if (err && !hasSession) {\n              console.log();\n              process.exit();\n            }\n\n            changeTheme(results);\n          });\n        });\n\n        break;\n\n      case 'CHANGE PASSWORD':\n\n        async.series({\n          email: function(next) {\n            read({\n              prompt: \"Email: \",\n              default: defaultEmail\n            }, function(err, email) {\n\n              next(err, email)\n            });\n          },\n          currentPassword: function(next) {\n            read({\n              prompt: \"Current Password: \",\n              silent: true\n            }, function(err, currentPassword) {\n\n              next(err, currentPassword);\n            });\n          },\n          newPassword: function(next) {\n            read({\n              prompt: \"New Password: \",\n              silent: true\n            }, function(err, newPassword) {\n\n              next(err, newPassword);\n            });\n          },\n          confirmPassword: function(next) {\n            read({\n              prompt: \"Confirm Password: \",\n              silent: true\n            }, function(err, confirmPassword) {\n\n              next(err, confirmPassword);\n            });\n          }\n        }, function(err, results) {\n          if (err) {\n            console.log();\n            process.exit();\n          }\n\n          if (results.newPassword !== results.confirmPassword) {\n            console.log('Your new password does not match the confirmed password. Try again.');\n            process.exit();\n          }\n\n          changePassword(results);\n        });\n        break;\n\n      case 'DELETE ACCOUNT':\n\n        async.series({\n          email: function(next) {\n            read({\n              prompt: \"Email: \",\n              default: defaultEmail\n            }, function(err, email) {\n              next(err, email);\n            });\n          },\n          password: function(next) {\n            read({\n              prompt: \"Password: \",\n              silent: true\n            }, function(err, password) {\n              next(err, password);\n            });\n          }\n        }, function(err, results) {\n          if (err) {\n            console.log();\n            process.exit();\n          }\n\n          read({\n            prompt: 'Are you sure you want to delete your JsonResume.org account? [y/n]: '\n          }, function(err, answer) {\n            if (answer === 'y') {\n              deleteUser(results);\n            } else if (answer === 'n') {\n              process.exit();\n            }\n          });\n        });\n        break;\n\n\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/menu.js":"exports.main = function(callback) {\n  var menu = require('terminal-menu')({\n    width: 29,\n    x: 4,\n    y: 2,\n    bg: 'black',\n    fg: 'cyan'\n  });\n  menu.reset();\n  menu.write('SETTINGS\\n');\n  menu.write('-------------------------\\n');\n  menu.add('CHANGE THEME');\n  menu.add('CHANGE PASSWORD');\n  menu.add('DELETE ACCOUNT');\n  menu.write('------------------------------\\n');\n  menu.add('EXIT');\n  menu.on('select', function(setting) {\n    menu.close();\n    console.log('SELECTED: ' + setting);\n    if (setting === 'EXIT') {\n      return;\n    }\n    callback(setting);\n  });\n\n  process.stdin\n    .pipe(menu.createStream())\n    .pipe(process.stdout); //create key stream\n  process.stdin.setRawMode(true); //listen for keys\n};\n\nexports.theme = function(callback) {\n  var menu = require('terminal-menu')({\n    width: 29,\n    x: 4,\n    y: 2,\n    bg: 'black',\n    fg: 'cyan'\n  });\n  menu.reset();\n  menu.write('SETTINGS\\n');\n  menu.write('-------------------------\\n');\n  menu.add('flat');\n  menu.add('modern');\n  menu.add('elegant');\n  menu.add('ADD THEME');\n  menu.write('------------------------------\\n');\n  menu.add('EXIT');\n  menu.on('select', function(theme) {\n    menu.close();\n    console.log('SELECTED: ' + theme);\n    if (theme === 'EXIT') {\n      return;\n    }\n    callback(theme);\n  });\n\n  process.stdin\n    .pipe(menu.createStream())\n    .pipe(process.stdout);\n  process.stdin.setRawMode(true); //listen for keys\n\n  // TODO add ADD THEME input here\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/change-theme.js":"var request = require('superagent');\nvar registryServer = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('changing theme...');\nspinner.setSpinnerString('/-\\\\');\nvar read = require('read');\nvar chalk = require('chalk');\nvar open = require('open');\n\nmodule.exports = function changeTheme(payLoad, callback) {\n  callback = callback || function() {};\n\n  payLoad.changeTheme = true;\n\n  spinner.start();\n  request\n    .put(registryServer + '/resume')\n    .send(payLoad)\n    .set('Accept', 'application/json')\n    .end(function(error, res) {\n      spinner.stop();\n\n      callback(error, res);\n\n      if (error && error.code === 'ENOTFOUND') {\n        console.log(chalk.red('\\nThere has been an error publishing your resume.'));\n        console.log('Please check your network connection.');\n        process.exit();\n      } else if (error || res.body.message === 'ERRORRRSSSS') {\n        // TODO fix server response\n        console.log(error, res.body.message);\n        console.log(chalk.red('\\nThere has been an error publishing your resume.'));\n        // console.log('Details:', error, res.body.message);\n        console.log('Check you are using correct login details.');\n      } else if (Object.keys(res.body).length === 0) {\n\n        // invalid session\n        // TODO fix server response\n        // remove session details from config\n        console.log(chalk.red('\\nInvalid user session.'));\n        console.log('Please try again and you will be prompted to enter your email and password');\n        process.exit();\n\n      } else {\n\n        console.log(chalk.green('\\nDone! Your resume theme has been successfully changed to ' + payLoad.theme + '.'));\n        console.log(chalk.green('And the changes have been published to:'), res.body.url);\n\n        read({\n          prompt: 'Would you like to view your newly themed resume in the web browser? [y/n]: '\n        }, function(er, answer) {\n          if (answer === 'y' && res.body.url) {\n            open(res.body.url);\n            process.exit();\n          } else if (answer === 'n') {\n            process.exit();\n          }\n        });\n\n      }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/change-password.js":"var request = require('superagent');\nvar registryServer = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('changing password...');\nspinner.setSpinnerString('/-\\\\');\n\nmodule.exports = function changePassword(passwordCredentials, callback) {\n\n  callback = callback || function() {};\n\n  spinner.start();\n  request\n    .put(registryServer + '/account')\n    .send(passwordCredentials)\n    .set('Accept', 'application/json')\n    .end(function(error, res) {\n\n      callback(error, res);\n\n      spinner.stop();\n      // cannot read property of null\n      if (error && error.code === 'ENOTFOUND') {\n        console.log('\\nThere has been an error publishing your resume.'.red);\n        console.log('Please check your network connection.'.cyan);\n        process.exit();\n      } else if (error || res.body.message === 'ERRORRRSSSS') {\n\n        console.log('\\nThere has been an error publishing your resume.'.red);\n        // console.log('Details:', error, res.body.message);\n        console.log('Please check you are using correct login details.'.blue);\n        process.exit();\n\n      } else {\n        console.log('\\nYour account password has been successfully updated.');\n        console.log(res.body.message);\n      }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/delete-user.js":"var request = require('superagent');\nvar registryServer = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('deleting account...');\nspinner.setSpinnerString('/-\\\\');\n\nmodule.exports = function deleteUser(user, callback) {\n    var callback = callback || function() {};\n\n    spinner.start();\n    request\n        .del(registryServer + '/account')\n        .send(user)\n        .set('Accept', 'application/json')\n        .end(function(err, res) {\n            spinner.stop();\n\n            if (err) {\n                console.log(err);\n                callback(err);\n                process.exit();\n            }\n            if (err && err.code === 'ENOTFOUND') {\n                console.log('\\nThere has been an error deleting your jsonResume account.'.red);\n                console.log('Please check your network connection.'.cyan);\n\t\t\t\tcallback(err);\n                process.exit();\n\n            } else if (res.body.message) {\n                console.log(res.body.message);\n\t\t\t\tcallback(null, res.body.message);\n            }\n        });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/serve.js":"var fs = require('fs');\nvar path = require('path');\nvar http = require('http');\nvar open = require('open');\nvar static = require('node-static');\nvar readline = require('readline');\n\nvar builder = require('./builder');\n\nfunction serveFile(file, req, res, dir) {\n    req.addListener('end', function () {\n        file.serve(req, res);\n    }).resume();\n}\n\nfunction reBuildResume(theme, dir, resumeFilename, cb) {\n    builder(theme, dir, resumeFilename, function(err, html) {\n        if(err) {\n            readline.cursorTo(process.stdout, 0);\n            console.log(err);\n            html = err;\n        }\n\n        fs.writeFile(path.join(process.cwd(), dir, 'index.html'), html, function(err) {\n            if(err) {\n                console.log(err);\n            }\n            cb();\n        });\n    });\n}\n\nmodule.exports = function(port, theme, silent, dir, resumeFilename) {\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir);\n    }\n\n    var file = new static.Server(path.join(process.cwd(), dir), { cache: 1 });\n    http.createServer(function(req, res) {\n        if(req.url === '/' || req.url === '/index.html') {\n            reBuildResume(theme, dir, resumeFilename, serveFile.bind(this, file, req, res));\n        } else {\n            serveFile(file, req, res);\n        }\n\n    }).listen(port);\n\n    console.log('');\n    var previewUrl = 'http://localhost:' + port;\n    console.log('Preview: ' + previewUrl);\n    console.log('Press ctrl-c to stop');\n    console.log('');\n\n    if (!silent) {\n        open(previewUrl);\n    }\n};\n\n// console.log javascript errors. could not find render function.\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/builder/index.js":"var themeServer = process.env.THEME_SERVER || 'http://themes.jsonresume.org/theme/';\n\nvar fs = require('fs');\nvar request = require('superagent');\nvar chalk = require('chalk');\nvar path = require('path');\n\nfunction sendExportHTML(resumeJson, theme, callback) {\n\n  console.log(resumeJson, theme);\n  console.log('Requesting theme from server...');\n\n\n  request\n    .post(themeServer + theme)\n    .send({\n        resume: resumeJson\n    })\n    .set('Accept', 'application/json')\n    .end(function(err, response) {\n      if (err) {\n        callback('There was an error downloading your generated html resume from our server: ' + err);\n      } else if (response.text) {\n        callback(null, response.text);\n      } else {\n        callback('There was an error downloading your generated html resume from our server.');\n      }\n    });\n}\n\nmodule.exports = function resumeBuilder(theme, dir, resumeFilename, cb) {\n\n  fs.readFile(resumeFilename, function(err, resumeJson) {\n    if (err) {\n      console.log(chalk.yellow('Could not find:'), resumeFilename);\n      console.log(chalk.cyan('Using example resume.json from resume-schema instead...'));\n      resumeJson = require('resume-schema').resumeJson;\n    } else {\n      try {\n        // todo: test resume schema\n        resumeJson = JSON.parse(resumeJson);\n      } catch (e) {\n        err = 'Parse error: ' + resumeFilename;\n        return cb(err);\n      }\n    }\n\n    var packageJson = {};\n\n    try {\n      packageJson = require(path.join(process.cwd(), 'package'));\n    } catch(e) {\n      // 'package' module does not exist\n    }\n\n    var render;\n    try {\n      render = require(path.join(process.cwd(), packageJson.main || 'index')).render;\n    } catch(e) {\n      // The file does not exist.\n    }\n\n    if(render && typeof render === 'function') {\n      try {\n        var rendered = render(resumeJson);\n        return typeof rendered.then === 'function' // check if it's a promise\n          ? rendered.then(cb.bind(null, null), cb)\n          : cb(null, rendered);\n      } catch (e) {\n        return cb(e);\n      }\n    } else {\n      console.log(chalk.yellow('Could not run the render function from local theme.'));\n      sendExportHTML(resumeJson, theme, cb);\n    }\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/version.js":"var request = require('superagent');\nvar pkg = require('../package.json');\nvar fs = require('fs');\n\n// get home directory\nvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nfunction writeToConfig(authObj, callback) {\n  fs.writeFile(homeDir + '/.jsonresume.json', JSON.stringify(authObj, undefined, 2), callback);\n}\n\nfunction checkNPMVersion(callback) {\n\n  console.log('Checking for latest version on NPM..');\n\n  request.get('http://registry.npmjs.org/resume-cli', function(res) {\n    LatestnpmVersion = res.body['dist-tags'].latest;\n    localVersion = pkg.version;\n    // console.log(localVersion, LatestnpmVersion);\n    callback(localVersion !== LatestnpmVersion, LatestnpmVersion);\n  });\n}\n\n\n// function getNewSessionAuth() {\n// }\n\n//todo: set session time\nfunction checkVersionAndSession(config, setSessionTime, callback) {\n\n  var currentTime = (new Date).getTime();\n\n  if(!config){\n    writeToConfig({\n      checkVersion: currentTime,\n      checkSession: currentTime\n    }, function(err) {\n\n      return callback(err);\n    });\n  }\n\n  // console.log(config.checkVersion);\n\n  //config file exists\n  // config = JSON.parse(config);\n  var itIsCheckVersionTime = currentTime - config.checkVersion > 86400000; // check if module is up-to-date every day\n  var itIsCheckSessionTime = currentTime - config.checkSession > 604800000; // refresh session every 7 days\n\n  // console.log(itIsCheckVersionTime, itIsCheckSessionTime, config.checkVersion, config);\n  if (itIsCheckVersionTime || typeof(config.checkVersion) === 'undefined') {\n\n    config.checkVersion = currentTime;\n    writeToConfig(config, function(err) {\n\n\n      checkNPMVersion(function(outOfDate, LatestnpmVersion) {\n\n        callback(outOfDate, LatestnpmVersion);\n      });\n\n    });\n\n  } else if (itIsCheckSessionTime || typeof(config.checkSession) === 'undefined') {\n    // getNewSessionAuth()\n    config.checkSession = currentTime;\n    writeToConfig(config, function(err) {\n\n      callback();\n    });\n  }\n  callback();\n\n}\n\nmodule.exports = {\n  checkVersionAndSession: checkVersionAndSession\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/login/index.js":"var read = require('read');\nvar loginRequest = require('./login-request');\nvar async = require('async');\n\nmodule.exports = function login(resumeJson) {\n\n    var defaultEmail = resumeJson && resumeJson.basics.email || '';\n\n    async.series({\n        email: function(next) {\n            read({\n                prompt: \"Email: \",\n                default: defaultEmail\n            }, function(err, email) {\n\n                next(err, email);\n            });\n        },\n        password: function(next) {\n            read({\n                prompt: \"Password: \",\n                silent: true\n            }, function(err, password) {\n\n                next(err, password);\n            });\n        }\n    }, function(err, results) {\n        if (err) {\n            console.log();\n            process.exit();\n        }\n\n        loginRequest(results);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/login/login-request.js":"var request = require('superagent');\nvar Spinner = require('cli-spinner').Spinner;\nvar spinner = new Spinner('attempting to login...');\nspinner.setSpinnerString('/-\\\\');\nvar REGISTRY_SERVER = process.env.REGISTRY_SERVER || 'http://registry.jsonresume.org';\nvar writeConfig = require('./write-config');\nvar chalk = require('chalk');\n\nmodule.exports = function loginRequest(userInfo, callback) {\n\n  var url =  REGISTRY_SERVER + '/session';\n\n  callback = callback || function() {}; // for testing\n\n  spinner.start();\n  request\n    .post(url)\n    .send(userInfo)\n    .set('Accept', 'application/json')\n    .end(function(err, res) {\n      console.log(err, res.body);\n      spinner.stop();\n\n      if (res.body.message === 'authentication error') {\n        console.log('Email or Password incorrect.');\n        return callback(err, res);\n        return;\n      }\n\n      if (err) {\n        console.log(chalk.red('There has been an error trying to log you in.'));\n        return callback(err, res);\n        return;\n      }\n\n      if (res.body.message === 'loggedIn') {\n\n        console.log(chalk.green('Success! You are now logged in.'));\n\n        callback(err, res);\n\n        writeConfig({\n          username: res.body.username,\n          email: res.body.email,\n          session: res.body.session\n        }, function(success) {\n          if (success) {\n            console.log('Your user session will be stored in a jsonresume.json config file in your home directory for 7 days.');\n          }\n        });\n\n      }\n    });\n  return;\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/login/write-config.js":"var fs = require('fs');\nvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nmodule.exports = function writeConfig(authObj, callback) {\n    fs.readFile(homeDir + '/.jsonresume.json', 'utf8', function(fileDoesNotExist, config) {\n        // console.log(authObj);\n        config = JSON.parse(config);\n        config = {\n            username: authObj.username,\n            email: authObj.email,\n            session: authObj.session,\n            checkVersion: config && config.checkVersion,\n            checkSession: config && config.checkSession\n        };\n        // console.log(config);\n        fs.writeFileSync(homeDir + '/.jsonresume.json', JSON.stringify(config, undefined, 2));\n        //todo: use async\n        callback(true);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre-flow/index.js":"var getConfig = require('./get-config');\nvar getResume = require('./get-resume');\nvar validateSchema = require('./validate-schema');\nvar checkPkgVersion = require('./check-pkg-version');\nvar async = require('async');\n// This is the first argument for the async.auto function that runs before all commands.\nmodule.exports = function preFlow(callback) {\n  async.auto({\n    getConfig: getConfig,\n    getResume: getResume,\n    // The first item in these arrays are condition dependencies for flow control\n    validateSchema: ['getResume', validateSchema],\n    checkPkgVersion: ['getConfig', checkPkgVersion]\n      // TODO check authToken\n  }, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre-flow/get-config.js":"var fs = require('fs');\nvar homeDirectory = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\n\nmodule.exports = function getConfig(callback) {\n  var results = {};\n  fs.readFile(homeDirectory + '/.jsonresume.json', function(noConfigFile, config) {\n    if (noConfigFile) {\n      var config = false;\n    } else {\n\n      try {\n        var config = JSON.parse(config);\n      } catch (err) {\n        var config = false;\n      }\n    }\n    // results.config = config;\n    // console.log(config);\n    callback(null, config);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre-flow/get-resume.js":"var fs = require('fs');\nvar jsonlint = require('jsonlint');\n\nmodule.exports = function getResume(callback) {\n  fs.readFile('./resume.json', function(resumeJsonDoesNotExist, data) {\n\n    if (resumeJsonDoesNotExist) {\n      if (['export', 'publish', 'test'].indexOf(process.argv[2]) !== -1) { // removed serve. test this later\n        console.log('There is no resume.json file located in this directory');\n        console.log('Type: `resume init` to initialize a new resume');\n        return;\n      }\n\n      var resumeJson = false;\n      callback(null);\n    } else {\n      try {\n        jsonlint.parse(String(data));\n        var resumeJson = JSON.parse(data);\n\n        callback(null, resumeJson);\n      } catch (error) {\n        callback(error);\n      }\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre-flow/validate-schema.js":"var test = require('../test.js');\n\nmodule.exports = function validateSchema(callback, results) {\n  var options = process.argv.slice(2);\n  if (['export', 'publish'].indexOf(process.argv[2]) !== -1) { // remove serve for the time being\n    if (options.indexOf('-F') === -1 && options.indexOf('--force') === -1) {\n      test.validate(results.getResume, function(error, response) {\n        if (error) {\n          console.log(response.message);\n        }\n        callback(error, results);\n      });\n    } else {\n      callback(null, results);\n    }\n  } else {\n    callback(null, results);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre-flow/check-pkg-version.js":"var fs = require('fs');\nvar request = require('superagent');\nvar pkg = require('../../package.json');\nvar chalk = require('chalk');\n\nmodule.exports = function checkPkgVersion(callback, results) {\n\n  var config = results.getConfig || {};\n  var currentTime = (new Date).getTime();\n\n  var itIsHighTime = currentTime - config.checkVersion > 86400000; // check if module is up-to-date every day\n\n  if (itIsHighTime || !config.checkVersion) { // if it's time to check or if a check has not been run berofe\n\n    config.checkVersion = currentTime;\n\n    isUpToDate(function(err) {\n\n      writeToConfig(config, callback);\n\n    });\n\n  } else {\n    callback(null)\n  }\n};\n\nvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nfunction writeToConfig(authObj, callback) {\n  fs.writeFile(homeDir + '/.jsonresume.json', JSON.stringify(authObj, undefined, 2), callback);\n}\n\nfunction isUpToDate(callback) {\n\n  console.log('Checking NPM for latest version...');\n\n  request.get('http://registry.npmjs.org/resume-cli', function(err, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    latestnpmVersion = res.body['dist-tags'].latest;\n    localVersion = pkg.version;\n\n    if (localVersion === latestnpmVersion) {\n      console.log('Your resume-cli software is up-to-date.');\n    } else {\n      console.log(chalk.yellow('Notice: You are currently using an out-of-date version of resume-cli.'));\n      console.log(chalk.cyan('Type'), '`sudo npm update -g resume-cli`', chalk.cyan('to upgrade to version'), latestnpmVersion);\n    }\n\n    callback(null);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/pre.js":"var fs = require('fs');\nvar homeDirectory = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\nvar resumeSchema = require('resume-schema');\nvar jsonlint = require('jsonlint');\nvar checkVersionAndSession = require('./version').checkVersionAndSession;\nvar writeNewConfig = require('./version').writeNewConfig;\nvar test = require('./test');\n\nmodule.exports = {\n  getConfig: function(callback) {\n    var results = {};\n    fs.readFile(homeDirectory + '/.jsonresume.json', function(noConfigFile, config) {\n      if (noConfigFile) {\n        var config = false;\n      } else {\n\n        try {\n          var config = JSON.parse(config);\n        } catch (err) {\n          // if exists but is empty\n          var config = false;\n        }\n      }\n\n      callback(null, config);\n    });\n  },\n  getResume: function(callback) {\n    fs.readFile('./resume.json', function(resumeJsonDoesNotExist, data) {\n\n      if (resumeJsonDoesNotExist) {\n        if (['export', 'publish', 'test'].indexOf(process.argv[2]) !== -1) { // removed serve. test this later\n          console.log('There is no resume.json file located in this directory');\n          console.log('Type: `resume init` to initialize a new resume');\n        }\n\n        var resumeJson = false;\n        callback(null);\n      } else {\n        try {\n          jsonlint.parse(String(data));\n          var resumeJson = JSON.parse(data);\n\n          callback(null, resumeJson);\n        } catch (error) {\n          callback(error);\n        }\n      }\n    });\n  },\n  checkPkgVersion: ['getConfig', checkPkgVersion]\n};\n\n\nfunction checkPkgVersion(callback, results) {\n\n  var config = results.getConfig || {};\n  var currentTime = (new Date).getTime();\n\n  var itIsHighTime = currentTime - config.checkVersion > 86400000; // check if module is up-to-date every day\n\n  if (itIsHighTime || !config.checkVersion) { // if it's time to check or if a check has not been run berofe\n\n    config.checkVersion = currentTime;\n\n    isUpToDate(function(err) {\n\n      writeToConfig(config, callback);\n\n    });\n\n  } else {\n    callback(null)\n  }\n\n};\n\nvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nfunction writeToConfig(authObj, callback) {\n  fs.writeFile(homeDir + '/.jsonresume.json', JSON.stringify(authObj, undefined, 2), callback);\n}\n\nfunction isUpToDate(callback) {\n  var request = require('superagent');\n  var pkg = require('../package.json');\n\n  console.log('Checking NPM for latest version...');\n\n  request.get('http://registry.npmjs.org/resume-cli', function(res) {\n    if (res.error) {\n      return callback(res.error);\n    }\n\n    latestnpmVersion = res.body['dist-tags'].latest;\n    localVersion = pkg.version;\n\n    if (localVersion === latestnpmVersion) {\n      console.log('Your resume-cli software is up-to-date.');\n    } else {\n      console.log('Notice: You are currently using an out-of-date version of resume-cli.'.yellow);\n      console.log('Type'.cyan, '`sudo npm update -g resume-cli`', 'to upgrade to version'.cyan, latestnpmVersion);\n    }\n\n    callback(null);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-resume-cli/node_modules/resume-cli/lib/settings/add-theme.js":""}